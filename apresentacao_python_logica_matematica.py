# -*- coding: utf-8 -*-
"""trabalho_logica_matematica.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ROLLCl-UhAQ1vo7u-zWio8eNiaeQp9BM

#TRABALHO LÓGICA MATEMÁTICA - 4 SEMESTRE CD FATEC OURINHOS
#PAULO ELIAS TAVARES GENEROZO
#THOMAS JEFFERSON BATISTA AMÉRICO
#MATEUS NATAN ROES SALGUEIRO
#RAFAEL AUGUSTO MORAES MONTEIRO
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

file_path = '/content/drive/My Drive/vendas.xlsx'
df_vendas = pd.read_excel(file_path)

#visualizar as primeiras linhas do dataframe
print(df_vendas.head())

"""PREMISSAS:

1) Se o cliente tem mais de 30 anos e comprou nos últimos 3 meses, então ele é ativo.
2) Se o cliente tem mais de 30 anos e não comprou nos últimos 3 meses, então ele é inativo.
3) Se o cliente tem menos de 30 anos e não comprou nos últimos 3 meses, então ele é inativo.
4) Se o cliente tem menos de 30 anos e comprou nos últimos 3 meses, então ele é ativo.
"""

#filtrando clientes com idade maior que 30 e que compraram nos últimos 3 meses
clientes_ativos = df_vendas[(df_vendas['Idade'] > 30) & (df_vendas['Comprou_Últimos_3_Meses'] == True)]

#exibindo clientes que atendem aos critérios
print("Clientes com idade maior que 30 e que compraram nos últimos 3 meses:")
print(clientes_ativos)

#filtrando vendas com valor superior a 100 e que o cliente comprou nos últimos 3 meses
vendas_mais_100 = df_vendas[(df_vendas['Compra_Valor_Anterior'] > 100) & (df_vendas['Comprou_Últimos_3_Meses'] == True)]

#exibindo as vendas que atendem aos critérios
print("\nVendas com valor superior a 100 e que o cliente comprou nos últimos 3 meses:")
print(vendas_mais_100)

# Função para aplicar a regra de Modus Ponens
def modus_ponens(A, A_implica_B):
    if A:
        return A_implica_B  # Se A é verdadeiro, então B é verdadeiro
    return False

# Função para aplicar a regra de Modus Tollens
def modus_tollens(A_implica_B, B):
    if not B:
        return not A_implica_B  # Se B é falso, então A também deve ser falso
    return True

# Definindo as proposições
A = True  # Está chovendo
A_implica_B = True  # Se estiver chovendo, a rua ficará molhada
B = True  # A rua está molhada

# Aplicando Modus Ponens
print("Modus Ponens:")
print(f"Se A implica B e A é verdadeiro, então B é: {modus_ponens(A, A_implica_B)}")

# Modificando a proposição B para testar Modus Tollens
B = False  # A rua não está molhada

# Aplicando Modus Tollens
print("\nModus Tollens:")
print(f"Se A implica B e B é falso, então A deve ser falso: {modus_tollens(A_implica_B, B)}")